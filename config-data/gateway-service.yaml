spring:
  application:
    name: gateway-service # Nombre de aplicación añadido
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true # Permite que el Gateway encuentre servicios en Eureka
      routes:
        - id: cliente-service
          uri: lb://cliente-service # lb:// para Load Balancing con Eureka
          predicates:
            - Path=/cliente/**
        - id: reserva-service
          uri: lb://reserva-service
          predicates:
            - Path=/reserva/**
        - id: descuento-persona-service
          uri: lb://descuento-persona-service
          predicates:
            - Path=/api/v1/descuentos/grupo/**
        - id: tarifa-service
          uri: lb://tarifa-service
          predicates:
            - Path=/api/v1/tarifas/**
        - id: descuento-frecuente-service
          uri: lb://descuento-frecuente-service
          predicates:
            - Path=/api/v1/descuentos/frecuente/**
        - id: descuento-especial-service
          uri: lb://descuento-especial-service
          predicates:
            - Path=/api/v1/descuentos/especial/**

server:
  port: 8090 # Puerto único para el API Gateway (no puede ser 8080 si Eureka lo usa)

eureka:
  client:
    fetch-registry: true
    register-with-eureka: true # El Gateway se registra en Eureka
    serviceUrl: # Corregido a camelCase
      defaultZone: http://localhost:8080/eureka/ # Actualizado al puerto de Eureka Server
  instance:
    # hostname: localhost # Opcional, puede ser inferido
    instanceId: ${spring.application.name}:${spring.application.instance_id:${random.value}} # Corregido a camelCase